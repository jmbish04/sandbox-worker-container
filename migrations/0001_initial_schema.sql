-- 1. Repeatable tasks (for the "user journeys" / feature paths)
CREATE TABLE IF NOT EXISTS repeatable_tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    pathway TEXT NOT NULL UNIQUE, -- 'error_recreation', 'solution_validation', 'testing', etc.
    name TEXT NOT NULL,
    description TEXT,
    prompt_template TEXT, -- A template for the user to fill out
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Seed the table with your defined pathways
INSERT INTO repeatable_tasks (pathway, name, description, prompt_template) VALUES
('error_recreation', 'Error Reproducer', 'Clones a repo and attempts to reproduce a bug.', '{"repo_url": "...", "bug_description": "..."}'),
('solution_validation', 'Solution Validator', 'Applies a patch and runs tests to validate a fix.', '{"repo_url": "...", "branch": "...", "patch": "..."}'),
('testing', 'E2E/Unit Testing', 'Runs a test suite against a repo.', '{"repo_url": "...", "test_mode": "both", "frontend_prompt": "...", "backend_prompt": "..."}');

-- 2. Main request log, serves as the parent for all traceability
CREATE TABLE IF NOT EXISTS task_requests (
    id TEXT PRIMARY KEY, -- A CUID or UUID generated by the worker
    pathway TEXT NOT NULL,
    status TEXT NOT NULL DEFAULT 'pending', -- 'pending', 'running', 'success', 'failed'
    initial_prompt TEXT NOT NULL,
    repo_url TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ended_at TIMESTAMP
);
CREATE INDEX IF NOT EXISTS idx_task_requests_status ON task_requests (status);
CREATE INDEX IF NOT EXISTS idx_task_requests_pathway ON task_requests (pathway);

-- 3. AI operation logs, linked to a task request
CREATE TABLE IF NOT EXISTS ai_operation_logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    task_request_id TEXT NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    agent_name TEXT NOT NULL, -- e.g., 'ValidationAgent', 'TestingAgent'
    ai_provider TEXT, -- 'workers-ai', 'gemini', etc.
    thought TEXT, -- The "agentic thinking"
    prompt TEXT,
    response TEXT,
    FOREIGN KEY (task_request_id) REFERENCES task_requests(id) ON DELETE CASCADE
);
CREATE INDEX IF NOT EXISTS idx_ai_operation_logs_task_id ON ai_operation_logs (task_request_id);

-- 4. Container operation logs, linked to a task request
CREATE TABLE IF NOT EXISTS container_operation_logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    task_request_id TEXT NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    stream TEXT NOT NULL, -- 'stdin', 'stdout', 'stderr'
    log_content TEXT NOT NULL,
    exit_code INTEGER,
    FOREIGN KEY (task_request_id) REFERENCES task_requests(id) ON DELETE CASCADE
);
CREATE INDEX IF NOT EXISTS idx_container_operation_logs_task_id ON container_operation_logs (task_request_id);
